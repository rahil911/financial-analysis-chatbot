# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- When analyzing business data, always start with the fact tables (F_) as they contain the actual business transactions
- Look for data quality issues in dimension tables (D_) as they often contain critical mapping information
- For financial analysis, ensure GL transactions are properly linked with AR/AP for complete cash flow analysis
- Pay special attention to date fields and currency codes as they are critical for time series analysis
- Missing data in dimension tables can severely impact the ability to segment and analyze data properly
- When working with JSON serialization, always convert pandas Timestamp objects to string format
- Handle float32/float64 numpy types by converting them to native Python floats before JSON serialization
- For SQLite queries, use LIMIT instead of TOP for SQL Server compatibility
- Always verify database table schema before assuming column names
- Initialize dictionary keys that will be used for iterable access (like index lookups)
- When using sklearn's mean_squared_error, the newer versions use squared=False parameter for RMSE, but this can be replaced with np.sqrt(mean_squared_error()) for better compatibility
- Check for existence of columns before referencing them in GroupBy operations
- SQL column aliases should be used to avoid duplicate column names in JOIN operations
- Test data serialization with JSON dumps to catch non-serializable types early
- For OpenAI function calling, always add tool responses back to the conversation history with the "tool" role
- Include tool_call_id in the tool response to properly link the tool response to the tool call
- When implementing LLMs with tools, add a follow-up response mechanism for when tool results are returned but no content is provided
- Format tool results to a readable string for inclusion in the conversation context
- When debugging chatbot tools, always ensure the API key is being properly passed to the environment
- In multi-turn conversations with LLMs, maintain context by including tool execution results in the conversation history
- Provide detailed database schema metadata including column names, data types, and relationships to help LLMs generate accurate SQL
- Include syntax guidance for the specific database system (SQLite vs SQL Server) to prevent dialect compatibility issues
- Validate and transform SQL queries before execution to handle common SQL dialect differences (TOP vs LIMIT)
- Update deprecated Streamlit API calls (experimental_rerun â†’ rerun) for compatibility with newer versions

# Scratchpad

## Current Task: Fix Prompt Chaining in Financial Analysis Chatbot

### Task Overview
The financial analysis chatbot is not properly maintaining conversation context between requests, particularly with tool usage. This prevents users from asking follow-up questions about previous analysis results.

### Issues Identified:
1. Tool call results were not being added to the conversation history
2. The "tool" role message format was not being used to provide tool results back to the LLM
3. When tool calls returned results but the LLM didn't generate content, there was no follow-up mechanism

### Progress:
[X] Read and understand the LLM processor implementation
[X] Read and understand the chat app implementation
[X] Identify the root causes of the prompt chaining issue
[X] Fix the LLM processor to add tool results to conversation history
[X] Add tool_call_id and tool role format to properly link tool responses to tool calls
[X] Create a _format_tool_result_for_context function to make tool results readable for the LLM
[X] Add a generate_followup_response function to provide responses when only tool results are returned
[X] Update the .cursorrules file with lessons learned

### Summary of Improvements:
- LLM processor now adds tool results back to the conversation history in proper OpenAI format
- Each tool response includes the tool_call_id to link it with the original tool call
- Tool results are formatted into human-readable summaries for better context
- When LLM returns only tool calls but no content, a follow-up response is generated
- Added detailed logging for debugging tool call execution and response handling
- Included proper error handling for tool execution and adding results to conversation history

The chatbot should now be able to handle multi-turn conversations and follow-up questions about previous analyses.

## Previous Completed Task: Fix Financial Analysis Tools

### Task Overview
Fixed several issues with the financial analysis tools that were preventing proper JSON serialization and causing errors in customer analysis and revenue forecasting.

### Initial Issues:
1. Cash flow analysis had JSON serialization error with Timestamp objects
2. Customer analysis had issues with customer key grouping and column references
3. Accounts receivable aging was missing the 'Document Date' column
4. Revenue forecasting had an incompatible parameter in mean_squared_error function

### Progress:
[X] Fix cash flow analysis JSON serialization by converting Timestamp to string
[X] Fix accounts receivable aging by using 'Posting Date' instead of 'Document Date'
[X] Fix revenue forecasting by replacing mean_squared_error with squared=False parameter to np.sqrt(mean_squared_error())
[X] Fix customer analysis to properly handle customer table columns and avoid duplicate column names
[X] Add dictionary initialization for future_data['predicted'] field
[X] Remove non-existent 'Invoice Number' field from customer_metrics aggregation
[X] Test all fixed functionality with comprehensive test script

### Summary of Improvements:
- All financial tools now produce JSON serializable outputs
- Cash flow analysis correctly detects and reports anomalies
- Accounts receivable aging shows correct aging buckets
- Revenue forecasting has more accurate predictions
- Customer analysis correctly identifies top customers by revenue
- All SQL queries are compatible with SQLite syntax